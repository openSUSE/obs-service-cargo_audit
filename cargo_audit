#!/usr/bin/env python3
#
# OBS Source Service to vendor all crates.io and dependencies for a
# Rust project locally.
#
# (C) 2021 William Brown <william at blackhats.net.au>
#
# Mozilla Public License Version 2.0
# See LICENSE.md for details.

"""\
OBS Source Service to audit all crates.io and dependencies for security
issues that are known upstream.

To do this manually you can run "cargo audit" inside the source of the
project.

This requires a decompressed version of you sources. Either you need to
provide this manually, or you can use obs_scm to generate this as part
of the osc services.

See README.md for additional documentation.
"""

import tarfile
import tempfile
import logging
import argparse
import os
import shutil
import json

from subprocess import run
from subprocess import PIPE
from subprocess import STDOUT
from subprocess import CalledProcessError

service_name = "obs-service-cargo_audit"
description = __doc__

if os.getenv('DEBUG') is not None:
    logging.basicConfig(level=logging.DEBUG)
else:
    logging.basicConfig(level=logging.INFO)

log = logging.getLogger(service_name)

EXCLUDE_ITEMS = [
    # These two are excluded because they are fundamentally
    # silly and can never be fixed.
    # https://rustsec.org/advisories/RUSTSEC-2020-0071.html
    # https://rustsec.org/advisories/RUSTSEC-2020-0159.html
    "RUSTSEC-2020-0071",
    "RUSTSEC-2020-0159",
]

def find_file(path, filename):
    return [
        os.path.join(root, filename)
        for root, dirs, files in os.walk(path)
        if filename in files and 'vendor' not in root
    ]

def generate_lock(path):
    log.debug(f" Running cargo generate-lockfile against: {path}/Cargo.toml")
    cmd = [
        "cargo", "generate-lockfile",
        "--manifest-path", f"{path}/Cargo.toml",
    ]
    dcmd = " ".join(cmd)
    log.debug(f" Running {dcmd}")
    proc = run(cmd, check=False, stdout=PIPE, stderr=STDOUT)
    output = proc.stdout.decode("utf-8").strip()
    log.debug(f" return: {proc.returncode}")
    if proc.returncode != 0:
        log.error(f" Could not generate Cargo.lock under {path}")
        log.error(f"{output}")
        log.error(f"{os.listdir(path)}")
        exit(1)

def cargo_audit(lock_file):
    log.debug(f"Running cargo audit against: {lock_file}")
    cmd = [
        "cargo-audit", "audit",
        "--json",
        "-c", "never",
        "-D", "warnings",
        # Once we have cargo-audit packaged, these flags can be used.
        "-n", "-d", "/usr/share/cargo-audit-advisory-db/",
        "-f", lock_file,
    ]
    for item in EXCLUDE_ITEMS:
        cmd.append("--ignore")
        cmd.append(item)
    dcmd = " ".join(cmd)
    log.debug(f"Running {dcmd}")
    proc = run(cmd, check=False, stdout=PIPE, stderr=STDOUT)
    output = proc.stdout.decode("utf-8").strip()
    log.debug(f"return: {proc.returncode}")
    log.debug(f"{output}")
    details = json.loads(output)
    # log.debug(json.dumps(details, sort_keys=True, indent=4))
    if proc.returncode != 0:
        # Issue may have been found!
        vuln_count = details["vulnerabilities"]["count"]
        if vuln_count > 0:
            log.error(f" 🚨 possible vulnerabilties: {vuln_count}")
            log.error(f" {lock_file}")
            log.error(f" For more information you SHOULD inspect the output of cargo audit manually")
            vulns = details["vulnerabilities"]["list"]
            for vuln in vulns:
                affects = vuln["advisory"]["package"]
                cvss = vuln["advisory"]["cvss"]
                vid = vuln["advisory"]["id"]
                categories = vuln["advisory"]["categories"]
                log.error(f" * {vid} -> crate: {affects}, cvss: {cvss}, class: {categories}")
            return details
    log.info(f"  ✅ No known issues detected in {lock_file}")
    return None

def do_extract(from_dir, tgt_dir):
    content = os.listdir(from_dir)
    maybe_src = [
        x for x in content
        if '.tar' in x and 'vendor' not in x and not x.endswith('.asc')
    ]
    for src in maybe_src:
        log.debug(f"Unpacking assumed source tar {src} to {tgt_dir}")
        with tarfile.open(f"{from_dir}/{src}", "r:*") as tar:
            tar.extractall(path=tgt_dir)
    return [os.path.join(tgt_dir, x) for x in os.listdir(tgt_dir)]

def do_cargo_audit(workdir, lsrcdir, lockfile):
    scan = []

    # Setup our temp dir, in case we need it.
    with tempfile.TemporaryDirectory() as tmpdirname:
        srcdirs = [lsrcdir]
        if lsrcdir is None:
            # We likely need to unpack sources.
            log.debug(f" setting up sources into {tmpdirname}")
            lsrcdir = tmpdirname
            srcdirs = do_extract(workdir, tmpdirname)
        else:
            (_, dirname) = os.path.split(lsrcdir)
            dirpath = os.path.join(tmpdirname, dirname)
            log.debug(f" copying sources into {dirpath}")
            lsrcdir = shutil.copytree(lsrcdir, dirpath, dirs_exist_ok=True)

        log.debug(f"srcdirs {srcdirs}")

        if not srcdirs:
            log.error(" No source directories are available - perhaps this requires services?")
            raise ValueError("No source directories are available")

        cargo_lock_paths = []
        if lockfile and len(srcdirs) == 1:
            tsrcdir = srcdirs[0]
            cargo_lock_f = os.path.join(tsrcdir, lockfile)
            log.info(f" _service configured lock file: {lockfile} -> {cargo_lock_f}")
            if not os.path.exists(cargo_lock_f):
                (tgtsrc, _) = os.path.split(cargo_lock_f)
                generate_lock(tgtsrc)
            cargo_lock_paths = [cargo_lock_f]
            log.debug(f"using {cargo_lock_paths}")
        else:
            log.debug(f" Searching for Cargo.lock in: {lsrcdir}")
            cargo_lock_paths = find_file(lsrcdir, "Cargo.lock")

            if not cargo_lock_paths:
                log.info(f" No Rust Cargo.lock found under {lsrcdir}")
                log.info(f" Searching for Cargo.toml in: {lsrcdir}")
                cargo_tomls = find_file(lsrcdir, "Cargo.toml")
                if len(cargo_tomls) > 0:
                    for toml in cargo_tomls:
                        gsrcdir = os.path.dirname(toml)
                        generate_lock(gsrcdir)
                        # cargo_lock_paths = [os.path.join(gsrcdir, 'Cargo.lock')]
                else:
                    log.error(f" No Rust Cargo.toml found under {lsrcdir}")
                    exit(1)
                # depending on the layout this could be a workspace, or a bunch
                # of projects. This changes where the cargo locks MAY end up so we
                # have to rescan here.
                log.debug(f" Searching for Cargo.lock in: {lsrcdir}")
                cargo_lock_paths = find_file(lsrcdir, "Cargo.lock")

                if not cargo_lock_paths:
                    log.error(f" No Rust Cargo.lock found under {lsrcdir} after generation")
                    exit(1)
            else:
                log.debug(f" Detected Rust lock files: {cargo_lock_paths}")

        # Do the scan.
        scan = [
            cargo_audit(cargo_lock_path)
            for cargo_lock_path in cargo_lock_paths
        ]
        scan = [
            details
            for details in scan
            if details is not None
        ]
        for details in scan:
            log.debug(json.dumps(details, sort_keys=True, indent=4))
    return scan


def main():
    log.info(f" Running OBS Source Service 🛒: {service_name}")

    workdir = os.getcwd()
    log.debug(f" Current working dir: {workdir}")

    parser = argparse.ArgumentParser(
        description=description, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument("--srcdir", default=None)
    parser.add_argument("--lockfile", default=None)
    # We always ignore this parameter, but it has to exist.
    parser.add_argument("--outdir", default=None)
    args = parser.parse_args()

    lsrcdir = args.srcdir
    lockfile = args.lockfile

    status = do_cargo_audit(workdir, lsrcdir, lockfile)

    # We exit the context manager, so tempdirname is now removed.
    if len(status) > 0:
        log.error(" ⚠️  Vulnerabilities may have been found. You must review these.")
        exit(1)
    log.info(" 🎉 🦀 No known issues detected")


if __name__ == "__main__":
    main()
